---
title: "Reproduced results of Roedel 2015"
author: "Jifan Wang, Yazid Zalai, Minoo Matbouriahi"
date: today
date-format: medium
execute: 
  echo: true
format: html
toc: true
toc-depth: 4
code-fold: true
editor: visual
---

```{r library and data, include=FALSE}
here::i_am("upl/output.qmd") # doesn't work on the old `here`
library(here) # call on the data using a relative directory

# trial profile & data overview
library(dplyr)
library(consort) # figure 1
library(prodlim) # median follow-up time, survival func

# primary analysis
## table 2
library(flextable)

## figure 2 & 3
library(survival)
library(survminer)

library(coin) # coin: for stratified log-rank tests with permutation distributions
library(coxme) # coxme: for mixed-effects Cox proportional hazards models

# subgroup analysis
library(forestplot) # figure 4
library(tidyr)

# additional analysis
library(cmprsk)

# load data
load("actual_data/Primary_endpoint_data.rda") 
```

## Introduction

In this page, we follow the statistical analysis plan (SAP) we prepared to reproduce all the tables and figures reported in in [Rödel et al. (2015)](http://dx.doi.org/10.1016/S1470-2045(15)00159-X). The CAO/ARO/AIO-04 study is a multicentre, open-label, phase 3 randomised trial conducted in Germany. It compared the standard regimen (fluorouracil-based chemoradiotherapy and postoperative chemotherapy) to an investigational regimen where oxaliplatin was added to the treatment for Locally Advanced Rectal Cancer.

### Objectives

**The primary objective** was to evaluate whether adding oxaliplatin improves disease-free survival (DFS). The DFS is defined as the time from randomization to the first occurrence of non-radical surgery of the primary tumour (R2 resection), locoregional recurrence after R0/1 resection of the primary tumour, metastatic disease or progression, or death from any cause, whichever occurred first. Second non-colorectal malignancies were disregarded in the analyses of disease-free survival.

**Secondary trial objectives** were to evaluate the efficacy of additional oxaliplatin to the standard regimen on: 1) overall survival which is defined as time from randomisation to death from any cause and 2) incidence of local and distant recurrences which is defined as the time between randomization and occurrence of any locoregional and distant recurrence, respectively, irrespective of whether this was a first event or not.

\[\[additional analysis\]\]

### Tables and Figures to reproduce:

-   **Table 1**, Baseline Characteristics and Demographics:

    -   Patient demographics and disease characteristics by treatment arm

    -   Stratification factors

    -   Prior treatments and medical history

-   **Table 2**, Efficacy table of Intention-to-treat analysis of first events for primary endpoint disease-free survival (DFS)

-   **Table 3**, Efficacy table of intention-to-treat analysis of all-cause deaths

-   **Figure 1**, Trial profile which is a CONSORT diagram showing the number of patients throughout the study

-   **Figure 2**

    -   Panel A, Kaplan-Meier curves for DFS

    -   Panel B, Kaplan-Meier curves for overall survival (OS)

-   **Figure 3**

    -   Panel A, Cumulative incidence curves for locoregional recurrence

    -   Panel B, Cumulative incidence curves for distant metastases

-   **Figure 4**, Forest plot including Hazard Ratios (HR) for DFS in predefined subgroups

### Reproducibility Note

All code for statistical analyses is documented with step-by-step comments explaining the methodology, assumptions, and interpretation. Code is hidden in the output but fully documented for transparency and replication. Readers can click the code tab in the file for the code. We ran the code under below environment setting.

```{r}
sessionInfo()
```

**R and Package Versions Used**: Initially, we proposed to conduct the reproduction using R version 3.1-2 with add-on packages coxme (2.2-3), prodlim (1.4.3), coin (1.0-23), and cmprsk (2.2-7) as presented in the original paper. We tried to install and downgrade to these versions to match the original computational environment. However, we encountered CPU compatibility issue on Mac and rendering issue with Markdown in Windows. Therefore, we proceeded with our current setup instead, using R version 4.4.3 with packages coxme (2.2-22), prodlim (2025.4.28), coin (1.4-3), survival (3.8-3), and cmprsk (2.2-12).

## Trial Profile & Data Overview

We calculated how long participants are followed during this study.

```{r}
#| label: median follow-up time

fu <- prodlim(Surv(OStime / 30.44, OSevent) ~ 1, data = CAOsurv, reverse = TRUE)
o_fu <- quantile(fu, c(.25, .5, .75))
```

The median follow-up time of this study is `r round(o_fu[[4]][2],2)` months (interquartile range: `r round(o_fu[[4]][1],2)`, `r round(o_fu[[4]][3],2)`). The median follow-up is approximately 4.2 years, and the interquartile range covers 5 years. The data is sufficient to assess the 3-year disease-free survival as in the sample size calculation.

#### Comparison with Figure 1

We visualized the CONSORT diagram (trial profile) as presented in the original publication with some minor differences. Our version includes the main patient flow: the total number of randomized patients, the allocation to the investigational group (5-FU + Oxaliplatin) and the control group (5-FU), the number of patients who did not undergo surgery with detailed reasons (death, progression before surgery, toxicity, surgery refusal, missing data), the number of patients who did not receive adjuvant chemotherapy with reasons, changes during adjuvant chemotherapy (switched arm or other treatment), and the final number who received treatment as randomized.

```{r, fig.height=8, fig.width=9}
#| label: fig-1
#| fig-cap: CONSORT diagram

# structure the data to feed the consort_plot()
# translate available reasons to English
df.fig1 <- CONSORT %>%
  mutate(n_start = patnr, # major steps require patient ID
         preop = case_when(praeop_th == "Arm gewechselt" ~ "Switched arm", 
                           TRUE ~ NA_character_), # exclusion steps require exclusion reasons
         n_preop = case_when(is.na(preop) ~ patnr, TRUE ~ NA),
         nosurg = case_when(
           surgery == "NA" ~ "Missing data",
           surgery == "vor OP ausgeschlossen" ~  "Excluded before surgery",
           surgery == "Progress vor der OP" ~ "Pregression before surgery",
           surgery == "OP verweigert" ~ "Surgery refused",
           surgery == "Toxizität" ~ "Toxicity",
           surgery == "Tod" ~ "Death",
           TRUE ~ NA_character_
         ),
         n_surg = case_when(is.na(nosurg) ~ patnr, TRUE ~ NA),
         adj_chemo = case_when(
           is.na(postop_th) ~ "Missing data",
           surgery == "OP durchgeführt" & postop_th == "keine Therapie" ~ "No treatment",
           postop_th =="vor Therapie abgebrochen" ~ "Discontinued before treatment",
           TRUE ~ NA_character_
         ),
         n_adj_chemo = case_when(is.na(adj_chemo) ~ patnr, TRUE ~ NA),
         switch_chemo = case_when(
           surgery == "OP durchgeführt" & postop_th == "Arm gewechselt" ~ "Switched arm",
           surgery == "OP durchgeführt" & postop_th == "andere Therapie" ~ "Other treatment",
           TRUE ~ NA_character_
         ),
         n_adj_chemo_rnd = case_when(is.na(switch_chemo) ~ patnr, TRUE ~ NA),
         randarm = factor(as.character(rand_arm), levels = c("5-FU + Oxaliplatin", "5-FU"))) %>%
  select(n_start:randarm)

# plot the CONSORT
consort_plot(data = df.fig1,
                  orders = c(n_start = "randomization",
                             randarm = "Randomized patient",
                             nosurg  = "Did not have surgery",
                             n_surg  = "Surgery",
                             adj_chemo    = "Did not have adjuvant chemotherapy",
                             n_adj_chemo  = "Started adjuvant chemotherapy",
                             switch_chemo = "Change during adjuvant chemotherapy",
                             n_adj_chemo_rnd = "Received as randomized"),
                  side_box = c("nosurg", "adj_chemo", "switch_chemo"),
                  allocation = "randarm",
                  cex = 0.7)
```

The main patient counts are similar to the original figure 1: 613 patients in the investigational group and 623 patients in the control group after randomization; 17 patients in the investigational group and 8 in the control group did not undergo surgery.

However, some numbers do not match with the original consort diagram. **The counts for patients who did not have adjuvant chemotherapy are slightly lower (129 vs. 131 in the investigational group and 138 vs. 139 in the control group). The numbers who started adjuvant chemotherapy are also slightly lower (467 vs. 462 for the investigational group; 477 vs. 473 for the control group). In addition, the final “received as randomized” count in the investigational group in our version is slightly higher (441 vs. 436).**

Regardless of how many patients remained in their assigned group and completed each treatment step, we conducted all analyses according to the intention-to-treat (ITT) principle, and **the ITT counts are identical to those in the original trial**.

#### Comparison with Table 1

We reported the baseline demographics and clinical characteristics for patients in each trial arm (Investigational: 5-FU + Oxaliplatin; Control: 5-FU only) in this table. We calculated:

-   the mean and standard deviation of age,
-   the median and interquartile range for age,
-   the counts and percentages for sex, ECOG performance status, clinical T category, clinical N category, overall clinical stage, tumour location from anal verge, histology, and tumour differentiation grade.

No statistical test was conducted between arms, as recommended by the CONSORT statement for randomized trials.

```{r}
#| label: tbl-table1
#| tbl-cap: Baseline characteristics

# Function to calculate percentages
calc_percent <- function(n, total) {
  n_sum <- sum(n, na.rm=TRUE)
  pct <- 100 * n_sum/total
  if (pct < 1 && pct > 0) {
    sprintf("%.0f (<1%%)", n_sum)
  } else {
    sprintf("%.0f (%.0f%%)", n_sum, round(pct))
  }
}

# Function to calculate statistics for numeric variables
calc_stats <- function(x) {
  if(all(is.na(x))) {
    return(list(mean_sd="NA (NA)", median_iqr="NA (NA-NA)"))
  }
  mean_sd <- sprintf("%.0f (%.0f)", mean(x, na.rm=TRUE), sd(x, na.rm=TRUE))
  q <- quantile(x, c(0.25, 0.5, 0.75), na.rm=TRUE)
  median_iqr <- sprintf("%.0f (%.0f-%.0f)", q[2], q[1], q[3])
  return(list(mean_sd=mean_sd, median_iqr=median_iqr))
}

# Function to map location categories
map_location <- function(bentf) {
  case_when(
    bentf == "< 6cm" ~ "0-5 cm",
    bentf == "6 - 10cm" ~ ">5-10 cm",
    bentf == ">10cm" ~ ">10 cm",
    TRUE ~ NA_character_
  )
}

# Function to map histology categories
map_histology <- function(histo) {
  case_when(
    histo == "Adeno-Ca." ~ "Adenocarcinoma",
    histo == "muzinöses Adeno-Ca." ~ "Mucinous adenocarcinoma",
    histo == "Siegelringkarzinom" ~ "Signet-ring cell carcinoma",
    histo %in% c("andere", "undifferenziertes Ca.") ~ "Other",
    TRUE ~ NA_character_
  )
}

# Function to map N categories
map_n_category <- function(n_cat) {
  case_when(
    n_cat == "cN0" | n_cat == "negativ" ~ "cN0",
    n_cat %in% c("cN1", "cN2", "positiv") ~ "cN1-2",
    TRUE ~ NA_character_
  )
}

# Function to map UICC stage
map_uicc_stage <- function(t_stage, n_stage) {
  n_stage_mapped <- map_n_category(n_stage)
  case_when(
    n_stage_mapped == "cN0" ~ "Stage II",
    n_stage_mapped == "cN1-2" & t_stage %in% c("cT1", "cT2") ~ "cT1-2 N1-2",
    n_stage_mapped == "cN1-2" & t_stage %in% c("cT3", "cT4") ~ "cT3-4 N1-2",
    TRUE ~ NA_character_
  )
}

# Create the base table structure
table1_data <- data.frame(
  Characteristic = c(
    "Age (years)", "Mean (SD)", "Median (IQR)",
    "Sex", "Male", "Female",
    "ECOG performance status", "0", "1-2", "Missing",
    "Clinical T category", "cT2", "cT3", "cT4", "Missing",
    "Clinical N category", "cN0", "cN1-2", "Missing",
    "Clinical disease stage", "Stage II", "Stage III", "  cT1-2 N1-2", "  cT3-4 N1-2", "Missing",
    "Location from anal verge", "0-5 cm", ">5-10 cm", ">10 cm", "Missing",
    "Histology", "Adenocarcinoma", "Mucinous adenocarcinoma", "Signet-ring cell carcinoma", "Other or missing",
    "Tumour differentiation", "Well differentiated (G1)", "Moderately differentiated (G2)", 
    "Poorly differentiated (G3)", "Missing data"
  ),
  stringsAsFactors = FALSE
)

 # Calculate statistics for both groups
tryCatch({
  # Split data into investigational and control groups
  investigational <- CAOsurv$randarm == "5-FU + Oxaliplatin"
  control <- CAOsurv$randarm == "5-FU"

  n_investigational <- sum(investigational)
  n_control <- sum(control)

  # Map categories
  CAOsurv$location <- map_location(CAOsurv$bentf)
  CAOsurv$histology <- map_histology(CAOsurv$histo)
  CAOsurv$n_category <- map_n_category(CAOsurv$gesamt_n)
  CAOsurv$stage <- map_uicc_stage(CAOsurv$gesamt_t, CAOsurv$gesamt_n)

# Calculate statistics for each group
  stats_investigational <- c(
    "", 
    calc_stats(CAOsurv$age[investigational])$mean_sd,
    calc_stats(CAOsurv$age[investigational])$median_iqr,
    "",
    calc_percent(CAOsurv$geschlecht[investigational] == "männlich", n_investigational),
    calc_percent(CAOsurv$geschlecht[investigational] == "weiblich", n_investigational),
    "",
    calc_percent(CAOsurv$ecog_b[investigational] == "Grad 0", n_investigational),
    calc_percent(CAOsurv$ecog_b[investigational] %in% c("Grad 1", "Grad 2"), n_investigational),
    calc_percent(is.na(CAOsurv$ecog_b[investigational]), n_investigational),
    "",
    calc_percent(CAOsurv$gesamt_t[investigational] == "cT2", n_investigational),
    calc_percent(CAOsurv$gesamt_t[investigational] == "cT3", n_investigational),
    calc_percent(CAOsurv$gesamt_t[investigational] == "cT4", n_investigational),
    calc_percent(is.na(CAOsurv$gesamt_t[investigational]), n_investigational),
    "",
    calc_percent(CAOsurv$n_category[investigational] == "cN0", n_investigational),
    calc_percent(CAOsurv$n_category[investigational] == "cN1-2", n_investigational),
    calc_percent(is.na(CAOsurv$n_category[investigational]), n_investigational),
    "",
    calc_percent(CAOsurv$stage[investigational] == "Stage II", n_investigational),
    "",  # Empty string for Stage III header
    calc_percent(CAOsurv$stage[investigational] == "cT1-2 N1-2", n_investigational),
    calc_percent(CAOsurv$stage[investigational] == "cT3-4 N1-2", n_investigational),
    calc_percent(is.na(CAOsurv$stage[investigational]), n_investigational),
    "",
    calc_percent(CAOsurv$location[investigational] == "0-5 cm", n_investigational),
    calc_percent(CAOsurv$location[investigational] == ">5-10 cm", n_investigational),
    calc_percent(CAOsurv$location[investigational] == ">10 cm", n_investigational),
    calc_percent(is.na(CAOsurv$location[investigational]), n_investigational),
    "",
    calc_percent(CAOsurv$histology[investigational] == "Adenocarcinoma", n_investigational),
    calc_percent(CAOsurv$histology[investigational] == "Mucinous adenocarcinoma", n_investigational),
    calc_percent(CAOsurv$histology[investigational] == "Signet-ring cell carcinoma", n_investigational),
    calc_percent(CAOsurv$histology[investigational] %in% c("Other", NA), n_investigational),
    "",
    calc_percent(CAOsurv$grading_b[investigational] == "G1", n_investigational),
    calc_percent(CAOsurv$grading_b[investigational] == "G2", n_investigational),
    calc_percent(CAOsurv$grading_b[investigational] == "G3", n_investigational),
    calc_percent(is.na(CAOsurv$grading_b[investigational]) | 
                 CAOsurv$grading_b[investigational] == "" | 
                 CAOsurv$grading_b[investigational] == "unbekannt" |
                 CAOsurv$grading_b[investigational] == "G2 und G3", n_investigational)
  )
  
  stats_control <- c(
    "", 
    calc_stats(CAOsurv$age[control])$mean_sd,
    calc_stats(CAOsurv$age[control])$median_iqr,
    "",
    calc_percent(CAOsurv$geschlecht[control] == "männlich", n_control),
    calc_percent(CAOsurv$geschlecht[control] == "weiblich", n_control),
    "",
    calc_percent(CAOsurv$ecog_b[control] == "Grad 0", n_control),
    calc_percent(CAOsurv$ecog_b[control] %in% c("Grad 1", "Grad 2"), n_control),
    calc_percent(is.na(CAOsurv$ecog_b[control]), n_control),
    "",
    calc_percent(CAOsurv$gesamt_t[control] == "cT2", n_control),
    calc_percent(CAOsurv$gesamt_t[control] == "cT3", n_control),
    calc_percent(CAOsurv$gesamt_t[control] == "cT4", n_control),
    calc_percent(is.na(CAOsurv$gesamt_t[control]), n_control),
    "",
    calc_percent(CAOsurv$n_category[control] == "cN0", n_control),
    calc_percent(CAOsurv$n_category[control] == "cN1-2", n_control),
    calc_percent(is.na(CAOsurv$n_category[control]), n_control),
    "",
    calc_percent(CAOsurv$stage[control] == "Stage II", n_control),
    "",  # Empty string for Stage III header
    calc_percent(CAOsurv$stage[control] == "cT1-2 N1-2", n_control),
    calc_percent(CAOsurv$stage[control] == "cT3-4 N1-2", n_control),
    calc_percent(is.na(CAOsurv$stage[control]), n_control),
    "",
    calc_percent(CAOsurv$location[control] == "0-5 cm", n_control),
    calc_percent(CAOsurv$location[control] == ">5-10 cm", n_control),
    calc_percent(CAOsurv$location[control] == ">10 cm", n_control),
    calc_percent(is.na(CAOsurv$location[control]), n_control),
    "",
    calc_percent(CAOsurv$histology[control] == "Adenocarcinoma", n_control),
    calc_percent(CAOsurv$histology[control] == "Mucinous adenocarcinoma", n_control),
    calc_percent(CAOsurv$histology[control] == "Signet-ring cell carcinoma", n_control),
    calc_percent(CAOsurv$histology[control] %in% c("Other", NA), n_control),
    "",
    calc_percent(CAOsurv$grading_b[control] == "G1", n_control),
    calc_percent(CAOsurv$grading_b[control] == "G2", n_control),
    calc_percent(CAOsurv$grading_b[control] == "G3", n_control),
    calc_percent(is.na(CAOsurv$grading_b[control]) | 
                 CAOsurv$grading_b[control] == "" | 
                 CAOsurv$grading_b[control] == "unbekannt" |
                 CAOsurv$grading_b[control] == "G2 und G3", n_control)
  )
  
# Add statistics to the table
  table1_data$`Investigational group (n=613)` <- stats_investigational
  table1_data$`Control group (n=623)` <- stats_control
  
})


# print the data
knitr::kable(table1_data)
```

**Our reproduced @tbl-table1 structure matches the original publication and we could reproduce it exactly as Table 1 presented in Rödel et al. (2015).**

## Primary Endpoint Analysis

The primary endpoint analysis consists of stratified log-rank tests and mixed-effects Cox proportional hazards models to evaluate the effect of adding oxaliplatin to the standard 5-FU regimen on disease-free survival (DFS). We first compare the DFS incidence with the paper before the analysis.

#### Comparison with Table 2

We reported the distribution of first events contributing to the primary endpoint: DFS. We counted the number of:

-   Macroscopically incomplete local resections (R2)
-   Locoregional recurrences as first events
-   Cumulative locoregional recurrences
-   Distant metastasis or progression as first events
-   Cumulative distant metastases
-   Deaths as first events
-   Total first events for DFS

Counts were computed by directly classifying the DFStype variable and by checking event dates in the relevant variables. Percentages were calculated within each treatment arm relative to the total number of patients in that arm.

```{r}
#| label: tbl-table2
#| tbl-cap: Intention-to-treat analysis of first events for primary endpoint disease-free survival

# Function to calculate percentages with special handling for <1%
calc_percent <- function(n, total) {
  if(is.na(n) || is.na(total) || total == 0) {
    return("NaN")
  }
  percentage <- (n/total * 100)
  if(percentage < 1 && percentage > 0) {
    return(paste0(n, " (<1%)"))
  }
  return(paste0(n, " (", round(percentage), "%)"))
}

# Process the data
process_data <- function(cao_data) {
  n_investigational <- sum(cao_data$randarm == "5-FU + Oxaliplatin", na.rm = TRUE)
  n_control <- sum(cao_data$randarm == "5-FU", na.rm = TRUE)
  
  results <- data.frame(
    Characteristic = c(
      "Macroscopically incomplete local resection (R2)",
      "Locoregional recurrence (after R0/R1 resection)",
      "As first event",
      "Cumulative*",
      "Distant metastasis or progression",
      "As first event",
      "Cumulative†",
      "Death as first event‡",
      "First event for disease-free survival (total)"
    )
  )
  
  count_r2 <- function(data) {
    r2_cases <- grepl("^R2($|_)", data$DFStype)
    return(sum(r2_cases, na.rm = TRUE))
  }
  
  count_local_first <- function(data) {
    dfs_first <- grepl("^Lokalrez($|_)", data$DFStype)
    return(sum(dfs_first, na.rm = TRUE))
  }
  
  # Reverting to the most direct data-driven count for cumulative LR
  count_local_cum <- function(data) {
    direct_lokalrez <- !is.na(data$Lokalrez) # Patients with a date for Lokalrez event
    # DFStype entries like "Lokalrez_Fernmeta" indicate LR as part of a combined first event
    # Exclude cases where Lokalrez was the sole first event (already covered by direct_lokalrez if date exists)
    combined_dfs_lokalrez <- grepl("Lokalrez_", data$DFStype)
    # Ensure we don't double count if DFStype is just "Lokalrez" and also has a Lokalrez date
    # Effectively, this is: (has Lokalrez date) OR (DFStype indicates LR as part of combined event AND was not 'Lokalrez' alone)
    # The most straightforward count based on clear data indicators: presence of Lokalrez date or specific DFStype pattern.
    # This resulted in 12 for inv, 25 for ctrl.
    unique_lr_patients <- direct_lokalrez | grepl("Lokalrez", data$DFStype) 
    return(sum(unique_lr_patients, na.rm = TRUE))
  }
  
  count_dist_first <- function(data) {
    dfs_dist_first <- grepl("^(Fernmeta|Progression|OPPFM)($|_)", data$DFStype) & 
                     !grepl("^Lokalrez", data$DFStype) & 
                     !grepl("^R2", data$DFStype)
    return(sum(dfs_dist_first, na.rm = TRUE))
  }
  
  count_dist_cum <- function(data) {
    direct_dist <- !is.na(data$Fernmeta) | !is.na(data$Progression) | !is.na(data$OPPFM)
    return(sum(direct_dist, na.rm = TRUE))
  }
  
  count_death_first <- function(data) {
    dfs_death <- data$DFStype == "Tod"
    return(sum(dfs_death, na.rm = TRUE))
  }
  
  count_total_events <- function(data) {
    return(sum(data$DFStype != "censored", na.rm = TRUE))
  }
  
  inv_data <- cao_data[cao_data$randarm == "5-FU + Oxaliplatin",]
  ctrl_data <- cao_data[cao_data$randarm == "5-FU",]
  
  inv_r2 <- count_r2(inv_data)
  inv_local_first <- count_local_first(inv_data)
  inv_local_cum <- count_local_cum(inv_data)
  inv_dist_first <- count_dist_first(inv_data)
  inv_dist_cum <- count_dist_cum(inv_data)
  inv_death_first <- count_death_first(inv_data)
  inv_total_events <- count_total_events(inv_data)
  
  ctrl_r2 <- count_r2(ctrl_data)
  ctrl_local_first <- count_local_first(ctrl_data)
  ctrl_local_cum <- count_local_cum(ctrl_data)
  ctrl_dist_first <- count_dist_first(ctrl_data)
  ctrl_dist_cum <- count_dist_cum(ctrl_data)
  ctrl_death_first <- count_death_first(ctrl_data)
  ctrl_total_events <- count_total_events(ctrl_data)
  
  results$Investigational <- c(
    calc_percent(inv_r2, n_investigational),
    "",
    calc_percent(inv_local_first, n_investigational),
    calc_percent(inv_local_cum, n_investigational),
    "",
    calc_percent(inv_dist_first, n_investigational),
    calc_percent(inv_dist_cum, n_investigational),
    calc_percent(inv_death_first, n_investigational),
    calc_percent(inv_total_events, n_investigational)
  )
  
  results$Control <- c(
    calc_percent(ctrl_r2, n_control),
    "",
    calc_percent(ctrl_local_first, n_control),
    calc_percent(ctrl_local_cum, n_control),
    "",
    calc_percent(ctrl_dist_first, n_control),
    calc_percent(ctrl_dist_cum, n_control),
    calc_percent(ctrl_death_first, n_control),
    calc_percent(ctrl_total_events, n_control)
  )
  
  return(results)
}

dir.create("reproduced_tf", showWarnings = FALSE)
results_data <- process_data(CAOsurv)
inv_lr_cum_calculated <- results_data$Investigational[4]
ctrl_lr_cum_calculated <- results_data$Control[4]

# print the table
knitr::kable(results_data)
```

\*Includes locoregional recurrence as first event and those occurring together with or after occurrence of distant metastases.\
†Includes distant metastases as first event and those occurring together with or after occurrence of locoregional recurrences.\
‡Includes death due to intercurrent disease, unknown cause, treatment-related death, and death from secondary malignancy.\

**The reproduced counts in @table2 match the published table 2 for all rows except the cumulative locoregional recurrence. Our calculation shows 12 (2%) for the investigational group and 25 (4%) for the control group, versus 18 (3%) and 38 (6%) in the published paper.**

#### Comparison Figure 2a

In this section, we reproduced the Kaplan–Meier curve for the primary endpoint, DFS, by treatment group, for the comparison with Figure 2a panel in paper.

```{r}
#| label: fig-2a
#| fig-cap: Disease-free survival in the intention-to-treat population

# reverse the treatment group
CAOsurv$randarmplot <- CAOsurv$randarm
levels(CAOsurv$randarmplot) <- c("5-FU","5-FU/OX")
CAOsurv$randarmplot <- relevel(CAOsurv$randarmplot, "5-FU/OX")

# generate plot
km1 <- survfit(Surv(DFStime / 365, DFSevent) ~ randarmplot, data = CAOsurv)
ggsurvplot(
  km1,
  data = CAOsurv,
  risk.table = TRUE,
  censor = FALSE,
  ylab = "Disease-free survival",
  break.y.by = 0.1,
  legend.title = "",
  legend.labs = c("Investigational group", "Control group")
)

summary(km1, times = 3)
```

**The reproduced curve and risk table in @fig-2a are identical to the original ones in the figure 2, panel A in the published paper.**

### Stratified Log-rank Test

We performed a stratified log-rank test accounting for the randomization stratification factors (center and clinical N category, according to the paper).

```{r}
#| label: stratified-logrank

# STEP 2: Perform stratified log-rank test
# This test accounts for the randomization stratification factors
# Uses permutation-based p-value calculation for robust inference
set.seed(29)  # Set seed for reproducibility of permutation test results
lr_test <- logrank_test(Surv(DFStime, DFSevent) ~ randarm | s_nzsmall,
                       data = CAOsurv,
                       distribution = approximate(nresample = 100000))

print(lr_test)
```

Authors reported an exact stratified log-rank test; however, we encountered an error `cannot compute exact p-values with blocks` when using the exact distribution in the test. Instead, we applied an approximative (Monte Carlo) log-rank test. The result showed that the DFS was different in the two treatment groups (p = `r round(pvalue(lr_test), 3)`), same as in the paper.

### Mixed-effects Cox Model

We fitted a mixed-effects Cox proportional hazards model with random intercepts for center and clinical N category to account for the hierarchical structure of the data. Based on the additional file we received, small stratum with fewer than 4 patients were merged to ensure adequate power. We followed the file and used the merged center-cN-category strata throughout the analysis.

```{r}
#| label: mixed-effects-cox

# STEP 2: Fit mixed-effects Cox proportional hazards model
# Fixed effect: treatment arm (randarm)
# Random effects: by center-cN strata (s_nzsmall)
# This accounts for clustering within centers and baseline prognostic factors
cox_me_model <- coxme(Surv(DFStime/365, DFSevent) ~ randarm + (1 | s_nz), 
                      data = CAOsurv)

cox_strat <- coxph(Surv(DFStime/365, DFSevent) ~ randarm + strata(s_nz), data = CAOsurv)
summary(cox_strat)
summary(cox_me_model)

# STEP 3: Extract and calculate key statistical measures
# Extract hazard ratio and confidence interval for treatment effect
hr <- exp(coef(cox_me_model))  # Exponentiate to get hazard ratio
hr_se <- sqrt(vcov(cox_me_model)[1,1])  # Standard error of log hazard ratio
hr_ci_lower <- exp(coef(cox_me_model) - 1.96 * hr_se)  # Lower 95% CI
hr_ci_upper <- exp(coef(cox_me_model) + 1.96 * hr_se)  # Upper 95% CI
p_value_cox <- 2 * pnorm(-abs(coef(cox_me_model) / hr_se))  # Two-sided p-value

```

The reproduced hazard Ratio for disease-free survival (5-FU + Oxaliplatin vs 5-FU) is `r round(hr, 2)` with 95% CI: (`r round(hr_ci_lower,2)`, `r round(hr_ci_upper,2)`), p=`r round(p_value_cox, 2)`. This shows that patients in the investigational group had an estimated 20% lower hazard of disease recurrence or death during the follow-up period, suggesting that adding oxaliplatin significantly improves DFS compared to 5-FU alone.

**The numbers are identical to the ones reported in the paper:** *The HR for disease-free survival was 0·79 (95% CI 0·64–0·98, p=0·03, mixed eﬀects Cox model)*

```{r}
#| label: mixed-effects-cox-nzsmall

# STEP 2: Fit mixed-effects Cox proportional hazards model
# Fixed effect: treatment arm (randarm)
# Random effects: by center-cN strata (s_nzsmall)
# This accounts for clustering within centers and baseline prognostic factors
cox_me_model_nzsmall <- coxme(Surv(DFStime/365, DFSevent) ~ randarm + (1 | s_nzsmall), 
                      data = CAOsurv)

# STEP 3: Extract and calculate key statistical measures
# Extract hazard ratio and confidence interval for treatment effect
hr <- exp(coef(cox_me_model_nzsmall))  # Exponentiate to get hazard ratio
hr_se <- sqrt(vcov(cox_me_model_nzsmall)[1,1])  # Standard error of log hazard ratio
hr_ci_lower <- exp(coef(cox_me_model_nzsmall) - 1.96 * hr_se)  # Lower 95% CI
hr_ci_upper <- exp(coef(cox_me_model_nzsmall) + 1.96 * hr_se)  # Upper 95% CI
p_value_cox <- 2 * pnorm(-abs(coef(cox_me_model_nzsmall) / hr_se))  # Two-sided p-value

```

Notably, the above results were generated by using **the most granular center-cN-category combination** instead of the variable where small strata are categorized. If we use the coarser strata, we got the HR being `r round(hr, 2)` with 95% CI: (`r round(hr_ci_lower,2)`, `r round(hr_ci_upper,2)`), p=`r round(p_value_cox, 2)`.

We then went back to the stratified log-rank test using the granular strata, and we received a warning saying `! 'block' contains levels with less than two observations`. We presume this is why the additional file mentioned a coarser strata for the analysis. However, **this strategy is not used consistently throughout the analyses**. Considering the goal of reproduction, we switched back to granular strata for the rest of the analyses.

Below shows a contingency table of the two aforementioned stratified variables.

```{r}
#| label: tbl-snznzsmall
#| tbl-cap: Comparison of granular and coarser strata of center-cN-category

CAOsurv %>%
  select(s_nz, s_nzsmall) %>%
  table(useNA = "ifany") %>%
  knitr::kable() %>%
  kableExtra::scroll_box(width = "700px", height = "200px")
```

### Proportional Hazards Assumption Check

We assessed the proportional hazards assumption using log-log plots of the survival curves by treatment group.

```{r}
#| label: fig-loglog-plot
#| fig-cap: Log-Log Plot for Proportional Hazards Assessment in Disease-free Survival

# STEP 1: Prepare data for proportional hazards assessment
# Create properly ordered factor for treatment groups
CAOsurv$randarm_plot <- factor(CAOsurv$randarm, 
                               levels = c("5-FU + Oxaliplatin", "5-FU"),
                               labels = c("5-FU + Oxaliplatin", "5-FU"))

# STEP 2: Fit Kaplan-Meier survival curves by treatment group
# Convert time to years for easier interpretation
km_fit2 <- prodlim(Hist(DFStime / 365, DFSevent) ~ randarm_plot + cluster(s_nz), data = CAOsurv)

# STEP 3: Create fine-grained time points for smooth log-log curves
# Use 1000 time points to create smooth curves for assessment
time_points <- seq(0, max(CAOsurv$DFStime)/365, length.out = 1000)

# STEP 4: Extract survival probabilities at all time points
# Predict survival probabilities for each treatment group
surv_5fu2 <- predict(km_fit2, times = time_points, 
                    newdata = data.frame(randarm_plot = "5-FU"))[[1]]
surv_5fuox2 <- predict(km_fit2, times = time_points, 
                      newdata = data.frame(randarm_plot = "5-FU + Oxaliplatin"))[[1]]


# STEP 5: Calculate log-log transformation for proportional hazards check
# Remove boundary values (0 and 1) to avoid -Inf in log-log transformation
# Proportional hazards assumption: log(-log(S(t))) curves should be parallel

valid_idx_5fu <- surv_5fu2 > 0 & surv_5fu2 < 1
valid_idx_5fuox <- surv_5fuox2 > 0 & surv_5fuox2 < 1

loglog_5fu <- log(-log(surv_5fu2[valid_idx_5fu]))
loglog_5fuox <- log(-log(surv_5fuox2[valid_idx_5fuox]))
time_5fu <- log(time_points[valid_idx_5fu])
time_5fuox <- log(time_points[valid_idx_5fuox])

# Create log-log plot for proportional hazards assessment
# Parallel lines indicate that the proportional hazards assumption is satisfied
# Diverging lines suggest violation of the assumption
plot(time_5fuox, loglog_5fuox, type = "l", col = "red", lwd = 2,
     xlab = "log(time (years))", ylab = "log(-log(S(t)))",
     main = "Log-Log Plot (Proportional Hazards Check)",
     ylim = range(c(loglog_5fu, loglog_5fuox), na.rm = TRUE))
lines(time_5fu, loglog_5fu, col = "blue", lwd = 2)
legend("bottomright", legend = c("5-FU + Oxaliplatin", "5-FU"), 
       col = c("red", "blue"), lwd = 2, bty = "n")
```

The lines crossed early in the follow-up time, so we think there is evidence on violation of the proportional hazard (PH) assumption. We notice that during the majority of follow-up period, the PH assumption is met. We are not sure how the violation of the PH assumption at early stage affects the model.

```{r}
#| label: survival-summary

# Calculate survival rates at key time points using predict function
surv_3yr <- summary(km_fit2, times = 3)
surv_3yr_5fu <- surv_3yr[2,"surv"] * 100
surv_3yr_5fu_upci <- surv_3yr[2,"upper"] * 100
surv_3yr_5fu_loci <- surv_3yr[2,"lower"] * 100

surv_3yr_5fuox <- surv_3yr[1,"surv"] * 100
surv_3yr_5fuox_upci <- surv_3yr[1,"upper"] * 100
surv_3yr_5fuox_loci <- surv_3yr[1,"lower"] * 100
```

The probability of DFS at 3 years is `r round(surv_3yr_5fuox)`% (95% CI: `r round(surv_3yr_5fuox_loci)`%, `r round(surv_3yr_5fuox_upci)`%) in the investigational group and `r round(surv_3yr_5fu)`% (95% CI: `r round(surv_3yr_5fu_loci)`%, `r round(surv_3yr_5fu_upci)`%)  in the control group. **These probabilities match the numbers reported in the paper.**

## Secondary Endpoints Analysis

Secondary endpoints analysis consists of reporting overall survival, cumulative incidence of locoregional recurrences, and cumulative incidence of distant recurrences using Kaplan-Meier curve with a risk table per group. Secondary endpoints are considered exploratory and thus not tested statistically since the trial is powered on the primary endpoint. We first compared the distribution of all-cause deaths by cause with the original paper.

#### Comparison with Table 3

In Table 3, we reproduced the distribution of all-cause deaths by cause. For each arm, we counted the number of deaths due to:

-   rectal cancer,
-   toxicity from neoadjuvant or adjuvant chemotherapy,
-   postoperative death within 60 days of surgery,
-   secondary malignancy,
-   intercurrent disease,
-   unknown cause or missing information.

Percentages were calculated relative to the total number of patients per arm. Unknown or missing cause was counted as deaths with no coded cause or marked as “unknown” in the dataset.

```{r}
#| label: tbl-table3
#| tbl-cap: Intention-to-treat analysis of all-cause deaths

# Define the groups
investigational_group <- CAOsurv$randarm == "5-FU + Oxaliplatin" # investigational group
control_group <- CAOsurv$randarm == "5-FU" # control group

# Count the number of subjects in each group
n_investigational <- sum(investigational_group)
n_control <- sum(control_group)

# Function to check if a date column is not NA (meaning death occurred)
has_death <- function(x) {
  return(!is.na(x))
}

# Calculate all-cause deaths
all_cause_deaths_inv <- sum(has_death(CAOsurv$Tod[investigational_group]))
all_cause_deaths_ctrl <- sum(has_death(CAOsurv$Tod[control_group]))

# Calculate deaths by cause
rectal_cancer_deaths_inv <- sum(CAOsurv$COD[investigational_group] == "Tumor", na.rm = TRUE)
rectal_cancer_deaths_ctrl <- sum(CAOsurv$COD[control_group] == "Tumor", na.rm = TRUE)

toxicity_deaths_inv <- sum(CAOsurv$COD[investigational_group] == "Tox", na.rm = TRUE)
toxicity_deaths_ctrl <- sum(CAOsurv$COD[control_group] == "Tox", na.rm = TRUE)

postop_deaths_inv <- sum(CAOsurv$COD[investigational_group] == "post-OP", na.rm = TRUE)
postop_deaths_ctrl <- sum(CAOsurv$COD[control_group] == "post-OP", na.rm = TRUE)

secondary_malignancy_deaths_inv <- sum(CAOsurv$COD[investigational_group] == "zweittumor", na.rm = TRUE)
secondary_malignancy_deaths_ctrl <- sum(CAOsurv$COD[control_group] == "zweittumor", na.rm = TRUE)

intercurrent_disease_deaths_inv <- sum(CAOsurv$COD[investigational_group] == "sonstige", na.rm = TRUE)
intercurrent_disease_deaths_ctrl <- sum(CAOsurv$COD[control_group] == "sonstige", na.rm = TRUE)

# For unknown/missing, we count:
# 1. Those marked as "unklar" (unknown)
# 2. Those who died (Tod is not NA) but have no cause of death (COD is NA)
unknown_deaths_inv <- sum(CAOsurv$COD[investigational_group] == "unklar", na.rm = TRUE)
unknown_deaths_ctrl <- sum(CAOsurv$COD[control_group] == "unklar", na.rm = TRUE)

missing_deaths_inv <- sum(has_death(CAOsurv$Tod[investigational_group]) & is.na(CAOsurv$COD[investigational_group]))
missing_deaths_ctrl <- sum(has_death(CAOsurv$Tod[control_group]) & is.na(CAOsurv$COD[control_group]))

unknown_missing_deaths_inv <- unknown_deaths_inv + missing_deaths_inv
unknown_missing_deaths_ctrl <- unknown_deaths_ctrl + missing_deaths_ctrl

# Create a function to format the count and percentage
format_count_pct <- function(count, total) {
  # Ensure we have valid numbers
  if (is.na(count) || is.na(total) || total == 0) {
    return("0 (0%)")
  }
  
  pct <- round(count / total * 100)
  if (pct < 1 && count > 0) {
    return(paste0(count, " (<1%)"))
  } else {
    return(paste0(count, " (", pct, "%)"))
  }
}

# Create the data structure for the table
table_data <- data.frame(
  Cause = c("All-cause deaths", 
            "Rectal cancer", 
            "Toxicity from neoadjuvant or adjuvant chemotherapy",
            "Postoperative death within 60 days after surgery", 
            "Secondary malignancy",
            "Intercurrent disease", 
            "Unknown or missing"),
  Investigational = c(
    format_count_pct(all_cause_deaths_inv, n_investigational),
    format_count_pct(rectal_cancer_deaths_inv, n_investigational),
    format_count_pct(toxicity_deaths_inv, n_investigational),
    format_count_pct(postop_deaths_inv, n_investigational),
    format_count_pct(secondary_malignancy_deaths_inv, n_investigational),
    format_count_pct(intercurrent_disease_deaths_inv, n_investigational),
    format_count_pct(unknown_missing_deaths_inv, n_investigational)
  ),
  Control = c(
    format_count_pct(all_cause_deaths_ctrl, n_control),
    format_count_pct(rectal_cancer_deaths_ctrl, n_control),
    format_count_pct(toxicity_deaths_ctrl, n_control),
    format_count_pct(postop_deaths_ctrl, n_control),
    format_count_pct(secondary_malignancy_deaths_ctrl, n_control),
    format_count_pct(intercurrent_disease_deaths_ctrl, n_control),
    format_count_pct(unknown_missing_deaths_ctrl, n_control)
  )
)

# Create column headers with group sizes
colnames(table_data) <- c("Cause", 
                         paste0("Investigational\ngroup (n=", n_investigational, ")"),
                         paste0("Control\ngroup (n=", n_control, ")"))

# Create a flextable
ft <- flextable::flextable(table_data)
ft <- flextable::set_caption(ft, caption = "Table 3: Intention-to-treat analysis of all-cause deaths")

# Format the table
ft <- flextable::theme_vanilla(ft)
ft <- flextable::bg(ft, bg = "#f8ecec")
ft <- flextable::bg(ft, bg = "#e0e0e0", part = "header")  # Light grey header
ft <- flextable::bold(ft, part = "header")
ft <- flextable::align(ft, align = "left", part = "all")
ft <- flextable::padding(ft, padding = 5, part = "all")
ft <- flextable::autofit(ft)
ft <- flextable::width(ft, width = c(3, 1.5, 1.5))

# Add footer with bold title
ft <- flextable::add_footer_row(ft, values = "Table 3: Intention-to-treat analysis of all-cause deaths", colwidths = 3)
ft <- flextable::bold(ft, bold = TRUE, part = "footer")
ft <- flextable::bg(ft, bg = "white", part = "footer")

ft
```

**We could reproduce the counts and percentages for all-cause deaths and specific causes exactly as reported in the original Table 3 for both the investigational and control groups.**

#### Comparison with Figure 2b

We presented the Kaplan–Meier curve for overall survival by treatment group for comparison with Figure 2b panel in the published paper.

```{r}
#| label: fig-2b
#| fig-cap: Overall survival in the intention-to-treat population 

km2 <- survfit(Surv(OStime / 365, OSevent) ~ randarmplot, data = CAOsurv[CAOsurv$OStime<=2260,])
ggsurvplot(
  km2,
  data = CAOsurv[CAOsurv$OStime<=2260,],
  risk.table = TRUE,
  censor = FALSE,
  break.time.by = 1,
  break.y.by = 0.1,
  ylab = "Overall survival",
  legend.title = "",
  legend.labs = c("Investigational group", "Control group")
)
```

The shape of the overall survival curve and risk table are quite similar to the original figure. **However, there is a mismatch for the number at risk in the control group at all year marks. Our number is one participant fewer than reported in the paper.** To confirm this mismatch, we manually calculated the number at risk per treatment group for overall survival

```{r}
#| label: tbl-OS-number-at-risk
#| tbl-cap: Number at risk of overall survival per treatment group

df.fig2b <- CAOsurv %>%
  mutate(excludeyear = case_when((OSevent = 1 & OStime/365 <=1)|(OSevent != 1 & OStime/365 <=1) ~ 1, #exclude at y1
                                 (OSevent = 1 & OStime/365 <=2)|(OSevent != 1 & OStime/365 <=2) ~ 2, #exclude at y2
                                 (OSevent = 1 & OStime/365 <=3)|(OSevent != 1 & OStime/365 <=3) ~ 3, #exclude at y3
                                 (OSevent = 1 & OStime/365 <=4)|(OSevent != 1 & OStime/365 <=4) ~ 4, #exclude at y4
                                 (OSevent = 1 & OStime/365 <=5)|(OSevent != 1 & OStime/365 <=5) ~ 5, #exclude at y5
                                 (OSevent = 1 & OStime/365 <=6)|(OSevent != 1 & OStime/365 <=6) ~ 6, #exclude at y6
                                 TRUE ~ 9),
         ar0 = 1,
         ar1 = case_when(excludeyear>1 ~ 1, TRUE ~ 0),
         ar2 = case_when(excludeyear>2 ~ 1, TRUE ~ 0),
         ar3 = case_when(excludeyear>3 ~ 1, TRUE ~ 0),
         ar4 = case_when(excludeyear>4 ~ 1, TRUE ~ 0),
         ar5 = case_when(excludeyear>5 ~ 1, TRUE ~ 0),
         ar6 = case_when(excludeyear>6 ~ 1, TRUE ~ 0))

df.fig2b %>%
  summarize(y0=sum(ar0),
            y1=sum(ar1),
            y2=sum(ar2),
            y3=sum(ar3),
            y4=sum(ar4),
            y5=sum(ar5),
            y6=sum(ar6),
            .by = randarm) %>%
  knitr::kable()
```

The numbers at risk match with the original paper in our manual calculation. **Authors excluded participants who experienced events at each time mark in the number at risk count.**

#### Comparison with Figure 3

We deviated from the SAP where says using the `cmprsk` package for the cumulative incidence as we didn't find a way to plot only one cause. The figure in the paper seems to be generated from `gglpot2` pakcage, so we decided to plot the cumulative incidence using the `survminer` package. This package doesn't consider competing risk. We know that the cumulative incidence function uses the cause-specific hazard function, so we censored participants who experienced the competing risk in the data. Note that the cumulative incidence is reported in probability instead of percentage.

The original Figure 3 in the paper shows the cumulative incidence functions for locoregional recurrence and distant metastases by treatment group. However, in our reproduction, we do not have the appropriate data to reproduce the cumulative incidence of locoregional recurrence.

```{r}
#| label: fig-3a
#| fig-cap: Cumulative incidence of locoregional recurrences in the intention-to-treat population

# prepare data
df.fig3 <- CAOsurv %>%
  mutate(LRplot = case_when(LRtype == "Tod" ~ 0,
                            LRtype == "censored" ~ 0,
                            is.na(LRtype) ~ NA_real_,
                            TRUE ~ 1),
         # DRcausesp = case_when(is.na(DRtype) ~ NA_real_,                         grepl("Fernmeta|Fernmeta_Progression|OPPFM|Progression|Progression_OPPFM", DRtype) ~ 1,
         #                        TRUE ~ 0),
         DRcmptrsk = case_when(DRtype == "Tod" ~ 2, # who didn't have distant recurrence but died
                               grepl("censored", DRtype) ~ 0,
                               TRUE ~ 1),
         DRplot = case_when(DRtype == "Tod" ~ 0, # who didn't have distant recurrence but died
                            grepl("censored", DRtype) ~ 0,
                            TRUE ~ 1))

# Since the cumulative incidence function uses the cause-specific hazard function, the competing risk cam be classified as censored and use ggsurvplot()

km3 <- survfit(Surv(LRtime/365, LRplot) ~ randarm, data = df.fig3)
ggsurvplot(
  km3,
  data = df.fig3,
  fun = "cumhaz",
  risk.table = TRUE,
  censor = FALSE,
  break.time.by = 1,
  break.y.by = 0.01,
  ylab = "Cumulative incidecne of \nlocoregional recurrence",
  legend.title = "",
  legend.labs = c("Control group", "Investigational group")
)
```

```{r}
#| label: fig-3b
#| fig-cap: Cumulative incidence of distant recurrences in the intention-to-treat population

km4 <- survfit(Surv(DRtime / 365, DRplot) ~ randarm, data = df.fig3)
ggsurvplot(
  km4,
  data = df.fig3,
  fun = "cumhaz",
  risk.table = TRUE,
  censor = FALSE,
  break.time.by = 1,
  break.y.by = 0.05,
  ylab = "Cumulative incidecne of \ndistant recurrence",
  legend.title = "",
  legend.labs = c("Control group", "Investigational group")
)

# cuminc2 <- cuminc(ftime = df.fig3$DRtime/365, fstatus = df.fig3$DRcmptrsk, group = df.fig3$randarm)
```

Similar issue on the numbers at risk at year 1, 3, and 5 was identified as in the comparison with Figure 2b. Our number is one person off in control group, given by the `survminer` package. In order to check the reason, we use an alternative way to plot the cumulative incidence using the outcome variable with competing risks via the `prodlim` package.

```{r}
#| label: fig-alt-fig3b
#| fig-cap: Alternative plot for cumulative incidence of distant recurrence (by the prodlim package)

 crFit <- prodlim(Hist(DRtime/365,DRcmptrsk)~randarm, data=df.fig3) 
 plot(crFit,
      cause=1,
      ylim = c(0,0.5),
      legend.x = "topleft",
      confint = F,
      atrisk.at = 0:6)
```

As shown in the above plot, the numbers at risk are the same from the `prodlim` package. As the final confirmation, we manually calculated the number at risk again. In our manual calculation, participants who experienced any event at each year mark are excluded from the number at risk for that year.

```{r}
#| label: tbl-DR-number-at-risk
#| tbl-cap: Number at risk of distant recurrence per treatment group

df.fig3 <- df.fig3 %>%
  mutate(excludeyear = case_when((DRcmptrsk = 1 & DRtime/365 <=1)|(DRcmptrsk != 1 & DRtime/365 <=1) ~ 1, #exclude at y1
                                 (DRcmptrsk = 1 & DRtime/365 <=2)|(DRcmptrsk != 1 & DRtime/365 <=2) ~ 2, #exclude at y2
                                 (DRcmptrsk = 1 & DRtime/365 <=3)|(DRcmptrsk != 1 & DRtime/365 <=3) ~ 3, #exclude at y3
                                 (DRcmptrsk = 1 & DRtime/365 <=4)|(DRcmptrsk != 1 & DRtime/365 <=4) ~ 4, #exclude at y4
                                 (DRcmptrsk = 1 & DRtime/365 <=5)|(DRcmptrsk != 1 & DRtime/365 <=5) ~ 5, #exclude at y5
                                 (DRcmptrsk = 1 & DRtime/365 <=6)|(DRcmptrsk != 1 & DRtime/365 <=6) ~ 6, #exclude at y6
                                 TRUE ~ 9),
         ar0 = 1,
         ar1 = case_when(excludeyear>1 ~ 1, TRUE ~ 0),
         ar2 = case_when(excludeyear>2 ~ 1, TRUE ~ 0),
         ar3 = case_when(excludeyear>3 ~ 1, TRUE ~ 0),
         ar4 = case_when(excludeyear>4 ~ 1, TRUE ~ 0),
         ar5 = case_when(excludeyear>5 ~ 1, TRUE ~ 0),
         ar6 = case_when(excludeyear>6 ~ 1, TRUE ~ 0))

df.fig3 %>%
  summarize(y0=sum(ar0),
            y1=sum(ar1),
            y2=sum(ar2),
            y3=sum(ar3),
            y4=sum(ar4),
            y5=sum(ar5),
            y6=sum(ar6),
            .by = randarm) %>%
  knitr::kable()
```

The numbers at risk in our manual calculation match with the reported numbers in the paper. Based on these explorations, we found that *both `survminer` and `prodlim` package includes participants who experienced events at each time mark in the number at risk count.*

## Subgroup analysis

During the reproduction of the forestplot, we found a discrepancy in the categorization of age. The reported groups were "\<61, 61-70, and \>70." We found the numbers of events and total sample sizes per subgroup are different from the paper. The number of event and total sample size following the reported age groups in the paper are shown below.

```{r}
#| label: tbl-age-old
#| tbl-cap: Number of events and total sample size following the reported age groups in the paper

# Verify counts by age category
df.age <- CAOsurv %>%
  mutate(dfs_time = DFStime,
         dfs_status = as.numeric(CAOsurv$DFSevent),
         # new age
         age_cat = cut(age,
                      breaks = c(0, 60, 70, 100),
                      labels = c("\u226460", ">60-70", ">70"),
                      right = TRUE),
         # old age
         age_cat_og = case_when(age<61 ~ "<61",
                                age<=70 ~ "61-70",
                                is.na(age) ~ NA_character_,
                                TRUE ~ ">70"),
         # reverse treatment group
         randarm.re = randarm,
         randarm.re = relevel(randarm.re, "5-FU + Oxaliplatin"))

# tabulate event n/total n per treatment by old age
df.age %>%
  group_by(age_cat_og, randarm.re) %>%
  summarize(
    events = sum(dfs_status == 1, na.rm = TRUE),
    total = n(),
    .groups = 'drop'
  ) %>%
  mutate(`events/n` = paste(events, total, sep = "/")) %>%
  pivot_wider(id_cols = age_cat_og,
              names_from = randarm.re,
              values_from = `events/n`) %>%
  knitr::kable()
```

We found that if we use the `cut()` function and set cut-offs at 0, 60, 70, and 100, we will get the same event numbers and total n (see table below). The `cut` function uses right-inclusive range when cutting the variable. As a result, **the age levels in the subgroup analysis is "**$\leq60$, \>60-70, and \>70."

```{r}
#| label: tbl-age-new
#| tbl-cap: Number of events and total sample size per actual age groups

df.age %>%
  group_by(age_cat, randarm.re) %>%
    summarize(
      events = sum(dfs_status == 1, na.rm = TRUE),
      total = n(),
      .groups = 'drop'
    ) %>%
  mutate(`events/n` = paste(events, total, sep = "/")) %>%
  pivot_wider(id_cols = age_cat,
              names_from = randarm.re,
              values_from = `events/n`) %>%
  knitr::kable()
```

#### Comparison with Figure 4

We reproduced the forest plot for DFS hazard ratios with 95% confidence intervals across different subgroups, including age, sex, ECOG performance status, tumour location, cT category, cN category, ypT category, ypN category, resection completeness, pathological stage (TNM stage), and type of surgery. We didn't add the subgroup titles to the forest plot due to time constraint.

```{r, fig.width=11, fig.height=10}
#| label: fig-4
#| fig-cap: Disease-free survival in the intention-to-treat population by patient subgroups according to pretreatment and surgical or pathological factors after preoperative chemoradiotherapy

# Prepare the data for the forest plot
prepare_subgroup_analysis <- function() {
  # Based on the dataset structure:
  # - CAOsurv contains survival data 
  # - DFS is a survival object with time and status
  # - randarm is the treatment assignment
  
  # The figure title mentions "intention-to-treat population", so we'll use the full dataset
  # We'll use the DFS endpoint which matches the figure title

  # Extract DFS time and status from the Surv object
  CAOsurv$dfs_time <- CAOsurv$DFStime
  CAOsurv$dfs_status <- as.numeric(CAOsurv$DFSevent)
  
  # Convert treatment variable (5-FU is control, 5-FU + Oxaliplatin is intervention)
  # IMPORTANT: Ensure proper coding - "5-FU + Oxaliplatin" is experimental/investigational group
  CAOsurv$treatment <- ifelse(CAOsurv$randarm == "5-FU + Oxaliplatin", 1, 0)
  
  # Create age categories based on the optimized cutoffs we found
  # Through optimization, the best cutoffs to match the published figure are:
  # Lower cutoff: 60 (for Age <61)
  # Upper cutoff: 69 (for Age >60-70)
  CAOsurv$age_cat <- cut(CAOsurv$age, 
                        breaks = c(0, 60, 70, 100), 
                        labels = c("\u226460", ">60-70", ">70"),
                        right = TRUE)
  
  # Create a data frame to store hazard ratios and confidence intervals
  results <- data.frame()
  
  # Function to calculate HR for a subgroup
  calculate_hr <- function(data, condition = NULL, label) {
    if (!is.null(condition)) {
      subgroup_data <- filter(data, !!rlang::parse_expr(condition))
    } else {
      subgroup_data <- data
    }
    
    # Get counts for the figure
    n_intervention <- sum(subgroup_data$treatment == 1, na.rm = TRUE)
    n_control <- sum(subgroup_data$treatment == 0, na.rm = TRUE)
    
    # Count events
    events_intervention <- sum(subgroup_data$treatment == 1 & subgroup_data$dfs_status == 1, na.rm = TRUE)
    events_control <- sum(subgroup_data$treatment == 0 & subgroup_data$dfs_status == 1, na.rm = TRUE)
    
    # Skip calculation if there are too few events
    if (events_intervention + events_control < 5) {
      return(data.frame(
        label = label,
        hr = NA,
        lower = NA,
        upper = NA,
        events_intervention = events_intervention,
        n_intervention = n_intervention,
        events_control = events_control,
        n_control = n_control
      ))
    }
    
    # Create Cox model with treatment as the predictor
    cox_model <- tryCatch({
      # Reference is control (0), so HR < 1 means investigational is better
      coxme(Surv(DFStime/365, dfs_status) ~ treatment + (1|s_nz), data = subgroup_data)
    }, error = function(e) {
      return(NULL)
    })
    
    if (is.null(cox_model)) {
      return(data.frame(
        label = label,
        hr = NA,
        lower = NA,
        upper = NA,
        events_intervention = events_intervention,
        n_intervention = n_intervention,
        events_control = events_control,
        n_control = n_control
      ))
    }
    
    # Extract hazard ratio and confidence interval
    hr <- exp(coef(cox_model))
    ci <- tryCatch({
      exp(confint(cox_model))
    }, error = function(e) {
      return(matrix(c(NA, NA), nrow = 1, ncol = 2))
    })
    
    # Round to 2 decimal places for presentation
    hr_rounded <- round(hr[1], 2)
    lower_rounded <- round(ci[1, 1], 2)
    upper_rounded <- round(ci[1, 2], 2)
    
    data.frame(
      label = label,
      hr = hr_rounded, 
      lower = lower_rounded,
      upper = upper_rounded,
      events_intervention = events_intervention,
      n_intervention = n_intervention,
      events_control = events_control,
      n_control = n_control
    )
  }
  
  # Calculate HRs for age subgroups (using the optimized age categories)
  results <- rbind(results, calculate_hr(CAOsurv, "age_cat == '\u226460'", "Age \u226460"))
  results <- rbind(results, calculate_hr(CAOsurv, "age_cat == '>60-70'", "Age >60-70"))
  results <- rbind(results, calculate_hr(CAOsurv, "age_cat == '>70'", "Age >70"))
  
  # Sex
  results <- rbind(results, calculate_hr(CAOsurv, "geschlecht == 'männlich'", "Male"))
  results <- rbind(results, calculate_hr(CAOsurv, "geschlecht == 'weiblich'", "Female"))
  
  # ECOG performance status
  results <- rbind(results, calculate_hr(CAOsurv, "ecog_b == 'Grad 0'", "ECOG 0"))
  results <- rbind(results, calculate_hr(CAOsurv, "ecog_b == 'Grad 1' | ecog_b == 'Grad 2'", "ECOG 1-2"))
  
  # Location from anal verge (bentf variable)
  results <- rbind(results, calculate_hr(CAOsurv, "bentf == '< 6cm'", "0-5 cm"))
  results <- rbind(results, calculate_hr(CAOsurv, "bentf == '6 - 10cm'", ">5-10 cm"))
  results <- rbind(results, calculate_hr(CAOsurv, "bentf == '>10cm'", ">10 cm"))
  
  # cT category (gesamt_t)
  results <- rbind(results, calculate_hr(CAOsurv, "gesamt_t == 'cT2' | gesamt_t == 'cT3'", "cT2-3"))
  results <- rbind(results, calculate_hr(CAOsurv, "gesamt_t == 'cT4'", "cT4"))
  
  # cN category (gesamt_n)
  results <- rbind(results, calculate_hr(CAOsurv, "gesamt_n == 'cN0'", "cN0"))
  results <- rbind(results, calculate_hr(CAOsurv, "gesamt_n == 'cN1' | gesamt_n == 'cN2' | gesamt_n == 'positiv'", "cN+"))
  
  # ypT category
  results <- rbind(results, calculate_hr(CAOsurv, "pT == 'ypT0'", "ypT0"))
  results <- rbind(results, calculate_hr(CAOsurv, "pT == 'ypTis' | pT == 'ypT1'", "ypTis/T1"))
  results <- rbind(results, calculate_hr(CAOsurv, "pT == 'ypT2'", "ypT2"))
  results <- rbind(results, calculate_hr(CAOsurv, "pT == 'ypT3'", "ypT3"))
  results <- rbind(results, calculate_hr(CAOsurv, "pT == 'ypT4'", "ypT4"))
  
  # ypN category
  results <- rbind(results, calculate_hr(CAOsurv, "pN == 'ypN0'", "ypN0"))
  results <- rbind(results, calculate_hr(CAOsurv, "pN == 'ypN1'", "ypN1"))
  results <- rbind(results, calculate_hr(CAOsurv, "pN == 'ypN2'", "ypN2"))
  
  # Completeness of local tumour resection
  results <- rbind(results, calculate_hr(CAOsurv, "localRclass == 'R0'", "R0"))
  results <- rbind(results, calculate_hr(CAOsurv, "localRclass == 'R1'", "R1"))
  
  # TNM stage
  results <- rbind(results, calculate_hr(CAOsurv, "path_stad == 'ypT0ypN0'", "ypT0N0"))
  results <- rbind(results, calculate_hr(CAOsurv, "path_stad == 'Stadium I'|path_stad == 'ypTisN0'", "Stage I"))
  results <- rbind(results, calculate_hr(CAOsurv, "path_stad == 'Stadium IIA' | path_stad == 'Stadium IIB' | path_stad == 'Stadium IIC'", "Stage II"))
  results <- rbind(results, calculate_hr(CAOsurv, "path_stad == 'Stadium IIIA' | path_stad == 'Stadium IIIB' | path_stad == 'Stadium IIIC'", "Stage III"))
  
  # Type of surgery (op_meth)
  results <- rbind(results, calculate_hr(CAOsurv, "op_meth == 'tief ant. Res.' | op_meth == 'anteriore Res.'", "Low anterior resection"))
  results <- rbind(results, calculate_hr(CAOsurv, "op_meth == 'intersphinktere Res.'", "Intersphincteric resection"))
  results <- rbind(results, calculate_hr(CAOsurv, "op_meth == 'Exstirpation'", "Abdominoperineal resection"))
  
  # Total
  results <- rbind(results, calculate_hr(CAOsurv, NULL, "All"))
  
  # Create the exact order as in the figure
  results$order <- match(results$label, c(
    "Age \u226460", "Age >60-70", "Age >70",
    "Male", "Female",
    "ECOG 0", "ECOG 1-2", 
    "0-5 cm", ">5-10 cm", ">10 cm",
    "cT2-3", "cT4",
    "cN0", "cN+",
    "ypT0", "ypTis/T1", "ypT2", "ypT3", "ypT4",
    "ypN0", "ypN1", "ypN2",
    "R0", "R1",
    "ypT0N0", "Stage I", "Stage II", "Stage III",
    "Low anterior resection", "Intersphincteric resection", "Abdominoperineal resection",
    "All"
  ))
  
  # Sort by the defined order
  results <- results[order(results$order), ]
  
  # Remove the order column
  results$order <- NULL
  
  # Rename columns to match the figure terminology
  names(results)[names(results) == "events_intervention"] <- "events_treatment"
  names(results)[names(results) == "n_intervention"] <- "n_treatment"
  
  # Calculate the absolute difference between calculated HR and published HR
  # This helps identify which subgroups have the largest discrepancies
  results$hr_published <- NA
  results$hr_diff <- NA
  
  # Add published values for age categories to compare
  age_indices <- which(results$label %in% c("Age \u226460", "Age >60-70", "Age >70"))
  results$hr_published[age_indices[1]] <- 0.61  # Age <=60
  results$hr_published[age_indices[2]] <- 0.87  # Age >60-70
  results$hr_published[age_indices[3]] <- 1.06  # Age >70
  
  # Calculate differences for age categories
  for (i in age_indices) {
    if (!is.na(results$hr_published[i])) {
      results$hr_diff[i] <- abs(results$hr[i] - results$hr_published[i])
    }
  }
  
  # Remove comparison columns before returning results
  results$hr_published <- NULL
  results$hr_diff <- NULL
  
  return(results)
}

# Run the function to get the results
results <- prepare_subgroup_analysis()

# modify the data for forestplot
results.plot <- results %>%
  mutate(intervention = paste(events_treatment, n_treatment, sep = "/"),
         control = paste(events_control, n_control, sep = "/"),
         hrci = paste0(hr, " (", lower, ", ", upper, ")")) %>%
  # add_row(label = "Age", intervention = NA, control = NA, hrci = NA, .before = 1) %>%
  select(label, intervention, control, hrci)

m <- log(results$hr)
l <- log(results$lower)
u <- log(results$upper)

est <- as.data.frame(cbind(m, l , u ))

# print the plot
forestplot(results.plot, 
           labeltext = c(label, intervention, control, hrci),
           exp(est$m), exp(est$l), exp(est$u), 
           zero = 1,
           is.summary = 1:nrow(results.plot) %in% c(nrow(results.plot)),
           xlog = TRUE,
           xlab = "Hazard ratio \n Favours investigational group   |   Favours control group") %>%
  fp_add_lines(h_3 = gpar(lty=1),
               h_6 = gpar(lty=2),
               h_8 = gpar(lty=2),
               h_10 = gpar(lty=2),
               h_13 = gpar(lty=2),
               h_15 = gpar(lty=2),
               h_17 = gpar(lty=2),
               h_22 = gpar(lty=2),
               h_25 = gpar(lty=2),
               h_27 = gpar(lty=2),
               h_31 = gpar(lty=2),
               h_34 = gpar(lty=1)) %>%
  fp_add_header(label = c("","Subgroups"),
                intervention = c("Intervention", "(events/total n)"),
                 control = c("Control", "(event/total n)"),
                 hrci = c("","HR (95%CI)")) %>%
  fp_decorate_graph(graph.pos = 4) %>%
  fp_set_style(txt_gp = fpTxtGp(ticks = gpar(cex=1),
                                xlab = gpar(cex=1))) %>%
  fp_set_zebra_style("#f9f9f9")
```

**\[\[Our reproduced forest plot is identical to the original figure 4 reported by Rödel et al. (2015), with only minor differences (within ±0.01) in some subgroup hazard ratios. Notably, the hazard ratio differs by 0.09 in the ypTis/T1 subgroup.\]\]**

The mismatch in the ypT category comes from the number of participants at ypTis/T1 level. We combined ypTis and ypT1 in the subgroup analysis, but we found more people in this level.

```{r}
#| label: tbl-ypt
#| tbl-cap: ypT category in the dataset by treatment group

CAOsurv %>%
  select(pT, randarm) %>%
  table(., useNA = "ifany") %>%
  addmargins() %>%
  knitr::kable()
```

From the above table, we can see that the ypT category didn't have the ypTis and ypT1 levels merged in the subgroup analysis. The ypT1 group itself has 39 participants in the interventional and control groups each.

In the TNM stage variable, there is also levels of Stage IV and ypTisN0 which are not presented in Figure 4 in the paper. We were not able to figure out why those participants were removed from the analysis.

```{r}
#| label: tbl-tnm
#| tbl-cap: TNM stage in the dataset by treatment group

CAOsurv %>%
  select(path_stad, randarm) %>%
  table(., useNA = "ifany") %>%
  addmargins() %>%
  knitr::kable()
```

Note that we have also used the coarser center-cN-category strata in the subgroup analysis, and we found multiple subgroups having small deviation from the reported results besides the issues of two aforementioned variables. Since we have discussed this issue in the primary endpoint analysis, the results is not shown here.

## Additional analysis

### Overall survival

```{r}
#| label: tbl-os-cox
#| tbl-cap: Mixed-effects Cox model on overall survival using center-cN strata


cm_os <- coxme(Surv(OStime, OSevent) ~ randarm + (1 | s_nz), 
                      data = CAOsurv)

# Extract hazard ratio and confidence interval for treatment effect
tb_cm_os <- data.frame(
  hr = round(exp(coef(cm_os)),3),  # Exponentiate to get hazard ratio
  log_hr_se = round(sqrt(vcov(cm_os)[1,1]),3)) %>%  # Standard error of log hazard ratio
  mutate(
    hr_ci_lower = round(exp(coef(cm_os) - 1.96 * log_hr_se),3),  # Lower 95% CI
    hr_ci_upper = round(exp(coef(cm_os) + 1.96 * log_hr_se),3),   # Upper 95% CI
    p_value = round(2 * pnorm(-abs(coef(cm_os) / log_hr_se)), 3)  # Two-sided p-value  
  )

knitr::kable(tb_cm_os)
```

We then check the PH assumption for the overall survival using log-log plot.

```{r}
#| label: fig-log-log-os
#| fig-cap: Log-Log Plot for Proportional Hazards Assessment in Overall Survival

cm_os_fit <- prodlim(Hist(OStime / 365, OSevent) ~ randarm_plot + cluster(s_nz), data = CAOsurv)

# STEP 3: Create fine-grained time points for smooth log-log curves
# Use 1000 time points to create smooth curves for assessment
# time_points <- seq(0, max(CAOsurv$OStime)/365, length.out = 1000)

# STEP 4: Extract survival probabilities at all time points
# Predict survival probabilities for each treatment group
surv_5fu_os <- predict(cm_os_fit, times = time_points, 
                    newdata = data.frame(randarm_plot = "5-FU"))[[1]]
surv_5fuox_os <- predict(cm_os_fit, times = time_points, 
                      newdata = data.frame(randarm_plot = "5-FU + Oxaliplatin"))[[1]]

# STEP 5: Calculate log-log transformation for proportional hazards check
# Remove boundary values (0 and 1) to avoid -Inf in log-log transformation
# Proportional hazards assumption: log(-log(S(t))) curves should be parallel

valid_idx_5fu <- surv_5fu_os > 0 & surv_5fu_os < 1
valid_idx_5fuox <- surv_5fuox_os > 0 & surv_5fuox_os < 1

loglog_5fu <- log(-log(surv_5fu_os[valid_idx_5fu]))
loglog_5fuox <- log(-log(surv_5fuox_os[valid_idx_5fuox]))
time_5fu <- log(time_points[valid_idx_5fu])
time_5fuox <- log(time_points[valid_idx_5fuox])

# log-log plot
plot(time_5fuox, loglog_5fuox, type = "l", col = "red", lwd = 2,
     xlab = "log(time (years))", ylab = "log(-log(S(t)))",
     main = "Log-Log Plot (Proportional Hazards Check)",
     ylim = range(c(loglog_5fu, loglog_5fuox), na.rm = TRUE))
lines(time_5fu, loglog_5fu, col = "blue", lwd = 2)
legend("bottomright", legend = c("5-FU + Oxaliplatin", "5-FU"), 
       col = c("red", "blue"), lwd = 2, bty = "n")
```

The Cox model is not suitable for overall survival in this data.

### Distant recurrence

We first fitted a Fine-Gray model without considering the stratified randomization.

```{r}
fomula <- model.matrix( ~ df.fig3$randarm)[,-1]
CI.reg <- crr(df.fig3$DRtime,
              df.fig3$DRcmptrsk,
              cov1 = fomula,
              failcode = 1,
              cencode = 0)
summary(CI.reg)
```

Then we added a random intercept to each center-cN category.

```{r, eval=FALSE}
add<-comp.risk(Event(time,cause)~+1+cluster(id),data=multcif,cause=1,
               n.sim=0,times=times,max.clust=NULL)

out1<-random.cif(add,data=multcif,cause1=1,cause2=1)
summary(out1)
```
